{"version":3,"sources":["components/figureMap/FigureMap.jsx","utils.js","components/figureDistrib/FigureDistrib.jsx","components/figureTerrestrial/FigureTerrestrial.jsx","components/figureMarine/FigureMarine.jsx","components/figureTree/FigureTree.jsx","components/header/Header.jsx","components/navbar/Navbar.jsx","App.js","index.js","data/worldMap.geojson","assets/logo.svg","data/iucn_red_list.csv"],"names":["FigureMap","_ref","selectedCountry","setSelectedCountry","selectedYear","iucnRedListCSV","mapColor","projection","d3","center","geoGenerator","borderRef","useRef","legendRef","colorScale","domain","map","x","Math","pow","interpolator","legend","color","arguments","length","undefined","title","_ref$tickSize","tickSize","_ref$width","width","_ref$height","height","_ref$marginTop","marginTop","_ref$marginRight","marginRight","_ref$marginBottom","marginBottom","_ref$marginLeft","marginLeft","_ref$ticks","ticks","tickFormat","tickValues","ramp","n","canvas","document","createElement","context","getContext","i","fillStyle","fillRect","svg","attr","style","tickAdjust","g","selectAll","interpolate","min","range","copy","rangeRound","append","toDataURL","Object","assign","round","invertExtent","thresholds","quantiles","thresholdFormat","d","data","join","max","bandwidth","concat","call","select","remove","text","node","MapLegend","useEffect","current","innerHTML","appendChild","_useState","useState","_useState2","_slicedToArray","countryColorMap","setCountryColorMap","handleMouseClick","e","properties","name","target","getAttribute","then","tmpMap","Map","forEach","countryName","Country","year","Year","set","worldMap","geojson","features","enter","get","on","iucn","border","filter","empty","path","cloneNode","React","className","id","viewBox","ref","FigureDistrib","countryIucnCatRepartition","countrySpeciesRepartition","graphRefGeneral","graphRefSpecies","graphLegendRef","colors","labelColorMap","svg_base","keys","values","size","createLegend","Critical","Endangered","Vulnerable","Least Concern","colorsMap","CRITICAL","ENDANGERED","VULNERABLE","LEAST_CONCERN","tmp_data","JSON","parse","stringify","category","totKnownCategory","find","obj","leastConcernValue","value","reduce","total","bar","margin","categories","sort","a","b","sum","item","slice","push","padding","tickSizeOuter","y","stackedData","key","categoryData","createStackedBarChart","_ref2","_ref2$barHeight","barHeight","_ref2$f","f","_ref2$margin","top","right","bottom","left","_ref2$colors","groupData","percent","cumulative","label","groupDataFunc","sel","xScale","valueTexts","percentTexts","labelTexts","this","StackedBar","FigureTerrestrial","terrestrialJSON","Data","pointsList","pointsMap","Number","Value","yMinValue","Array","from","d2","yMaxValue","xMinValue","xMaxValue","getX","getY","linePathWorld","curve","has","linePathCountry","fill","opacity","yAxis","tickPadding","transform","xAxis","strokeWidth","stroke","dy","FigureMarine","marineJSON","FigureTree","src","frameBorder","Header","Navbar","logo","alt","href","App","_useState3","_useState4","_useState5","iucn_red_list","terrestial","marine","ReactDOM","createRoot","getElementById","render","StrictMode","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b1e28b02.chunk.js","sourcesContent":["import './figureMap.css';\nimport React, {useEffect, useRef, useState} from 'react';\nimport worldMap from '../../data/worldMap.geojson';\nimport * as d3 from 'd3';\nimport {MapLegend} from '../../utils'\n\nconst FigureMap = ({selectedCountry, setSelectedCountry, selectedYear, iucnRedListCSV}) => {\n\n    const mapColor = '#a8a8a8';\n\n    let projection = d3.geoMercator()\n        .center([-7, 60]);\n\n    let geoGenerator = d3.geoPath()\n        .projection(projection);\n\n    const borderRef = useRef(null);\n    const legendRef = useRef(null);\n    // d3.range(10).map((x) => (x ** 0.5)/10)\n\n    const colorScale = d3.scaleSequentialQuantile().domain(d3.range(101).map((x) => (x ** 0.5)/10)).interpolator(d3.interpolateReds);\n\n\n    const legend = MapLegend(colorScale, {\n        title: \"UICN Index\",\n        ticks: 4,\n        tickFormat: \"0.3f\",\n    })\n\n    useEffect(() => {\n        legendRef.current.innerHTML = '';\n        legendRef.current.appendChild(legend);\n    });\n\n    // create a map of country names and their corresponding colors from the csv\n    // the map is {(countryName, year): color}\n    const [countryColorMap, setCountryColorMap] = useState(null);\n    useEffect(() => {\n\n        d3.csv(iucnRedListCSV).then((data) => {\n            const tmpMap = new Map();\n            data.forEach((d) => {\n                let countryName = d.Country;\n                let year = d.Year;\n                let color = colorScale(d['Value']);\n                tmpMap.set((countryName + year), [d['Value'], color]);\n            });\n            setCountryColorMap(tmpMap);\n        });\n    }, []);\n\n    function handleMouseClick(e, d) {\n        // set the selected country\n        setSelectedCountry(d.properties.name);\n        d3.select('.figureMap__card_info').text(d.properties.name + ': ' + e.target.getAttribute('iucn'));\n    }\n\n\n    function update(geojson) {\n        let u = d3.select('.figureMap__card g.map')\n            .selectAll('path')\n            .data(geojson.features);\n\n        u.enter()\n            .append('path')\n            .attr('d', geoGenerator)\n            .style('fill', mapColor)\n            .style('stroke', null)\n    }\n\n    d3.json(worldMap).then((data) => {\n        update(data);\n    });\n\n    useEffect(() => {\n        // update the map color when the selected year changes\n        d3.select('.figureMap__card g.map')\n            .selectAll('path')\n            .style('fill', function (d) {\n                let countryName = d.properties.name;\n                let color = countryColorMap.get((countryName + selectedYear));\n                if (color === undefined) {\n                    return mapColor;\n                } else {\n                    return color[1];\n                }\n            })\n            .on('click', handleMouseClick);\n\n\n        // add a new attribute to each country path, which is the iucn value\n        d3.select('.figureMap__card g.map')\n            .selectAll('path')\n            .attr('iucn', function (d) {\n                let countryName = d.properties.name;\n                let iucn = countryColorMap.get((countryName + selectedYear));\n                if (iucn === undefined) {\n                    return 'N/A';\n                } else {\n                    return iucn[0];\n                }\n            });\n\n        // copy the border of the selected country to the end of the svg and set it to 2px\n        if (selectedCountry !== null) {\n            let border = d3.select('.figureMap__card g.map')\n                .selectAll('path')\n                .filter(function (d) {\n                    return d.properties.name === selectedCountry;\n                });\n            if (border.empty()) {\n                return;\n            }\n\n            // copy d of the selected country\n            let path = border.node().cloneNode(true);\n\n            // set the border to 2px\n            d3.select(path).style('stroke', 'black').style('stroke-width', '2px');\n\n            // user borderRef to access the border element\n            borderRef.current.innerHTML = '';\n            borderRef.current.appendChild(path);\n\n        }\n\n    }, [selectedYear, countryColorMap, selectedCountry]);\n\n    return (\n        <div className=\"figureMap__card\">\n            <h1 className='figureMap__card_title'>World Map IUCN Red List</h1>\n            <div className=\"figureMap__card_info\">Select a country</div>\n            <svg id=\"svgmap\" viewBox=\"0 0 1000 650\">\n                <g className=\"map\"></g>\n                <g className='border' ref={borderRef}></g>\n\n            </svg>\n            <div className=\"figureMap__card_legend\" ref={legendRef}></div>\n        </div>\n    );\n};\n\nexport default FigureMap;\n","import * as d3 from 'd3';\n\n\n//-----LEGEND-----//\n// Copyright 2021, Observable Inc.\n// Released under the ISC license.\n// https://observablehq.com/@d3/color-legend\nexport function MapLegend(color, {\n\n    title,\n    tickSize = 6,\n    width = 320,\n    height = 44 + tickSize,\n    marginTop = 18,\n    marginRight = 0,\n    marginBottom = 16 + tickSize,\n    marginLeft = 0,\n    ticks = width / 64,\n    tickFormat,\n    tickValues\n} = {}) {\n\n    function ramp(color, n = 256) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = n;\n        canvas.height = 1;\n        const context = canvas.getContext(\"2d\");\n        for (let i = 0; i < n; ++i) {\n            context.fillStyle = color(i / (n - 1));\n            context.fillRect(i, 0, 1, 1);\n        }\n        return canvas;\n    }\n\n    const svg = d3.create(\"svg\")\n        .attr(\"width\", \"40%\")\n        .attr(\"viewBox\", [0, 0, width, height])\n        .style(\"overflow\", \"visible\")\n        .style(\"display\", \"block\");\n\n    let tickAdjust = g => g.selectAll(\".tick line\").attr(\"y1\", marginTop + marginBottom - height);\n    let x;\n\n    // Continuous\n    if (color.interpolate) {\n        const n = Math.min(color.domain().length, color.range().length);\n\n        x = color.copy().rangeRound(d3.quantize(d3.interpolate(marginLeft, width - marginRight), n));\n\n        svg.append(\"image\")\n            .attr(\"x\", marginLeft)\n            .attr(\"y\", marginTop)\n            .attr(\"width\", width - marginLeft - marginRight)\n            .attr(\"height\", height - marginTop - marginBottom)\n            .attr(\"preserveAspectRatio\", \"none\")\n            .attr(\"xlink:href\", ramp(color.copy().domain(d3.quantize(d3.interpolate(0, 1), n))).toDataURL());\n    }\n\n    // Sequential\n    else if (color.interpolator) {\n        x = Object.assign(color.copy()\n                .interpolator(d3.interpolateRound(marginLeft, width - marginRight)),\n            {\n                range() {\n                    return [marginLeft, width - marginRight];\n                }\n            });\n\n        svg.append(\"image\")\n            .attr(\"x\", marginLeft)\n            .attr(\"y\", marginTop)\n            .attr(\"width\", width - marginLeft - marginRight)\n            .attr(\"height\", height - marginTop - marginBottom)\n            .attr(\"preserveAspectRatio\", \"none\")\n            .attr(\"xlink:href\", ramp(color.interpolator()).toDataURL());\n\n        // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n        if (!x.ticks) {\n            if (tickValues === undefined) {\n                const n = Math.round(ticks + 1);\n                tickValues = d3.range(n).map(i => d3.quantile(color.domain(), i / (n - 1)));\n            }\n            if (typeof tickFormat !== \"function\") {\n                tickFormat = d3.format(tickFormat === undefined ? \",f\" : tickFormat);\n            }\n        }\n    }\n\n    // Threshold\n    else if (color.invertExtent) {\n        const thresholds\n            = color.thresholds ? color.thresholds() // scaleQuantize\n            : color.quantiles ? color.quantiles() // scaleQuantile\n                : color.domain(); // scaleThreshold\n\n        const thresholdFormat\n            = tickFormat === undefined ? d => d\n            : typeof tickFormat === \"string\" ? d3.format(tickFormat)\n                : tickFormat;\n\n        x = d3.scaleLinear()\n            .domain([-1, color.range().length - 1])\n            .rangeRound([marginLeft, width - marginRight]);\n\n        svg.append(\"g\")\n            .selectAll(\"rect\")\n            .data(color.range())\n            .join(\"rect\")\n            .attr(\"x\", (d, i) => x(i - 1))\n            .attr(\"y\", marginTop)\n            .attr(\"width\", (d, i) => x(i) - x(i - 1))\n            .attr(\"height\", height - marginTop - marginBottom)\n            .attr(\"fill\", d => d);\n\n        tickValues = d3.range(thresholds.length);\n        tickFormat = i => thresholdFormat(thresholds[i], i);\n    }\n\n    // Ordinal\n    else {\n        x = d3.scaleBand()\n            .domain(color.domain())\n            .rangeRound([marginLeft, width - marginRight]);\n\n        svg.append(\"g\")\n            .selectAll(\"rect\")\n            .data(color.domain())\n            .join(\"rect\")\n            .attr(\"x\", x)\n            .attr(\"y\", marginTop)\n            .attr(\"width\", Math.max(0, x.bandwidth() - 1))\n            .attr(\"height\", height - marginTop - marginBottom)\n            .attr(\"fill\", color);\n\n        tickAdjust = () => {\n        };\n    }\n\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height - marginBottom})`)\n        .call(d3.axisBottom(x)\n            .ticks(ticks, typeof tickFormat === \"string\" ? tickFormat : undefined)\n            .tickFormat(typeof tickFormat === \"function\" ? tickFormat : undefined)\n            .tickSize(tickSize)\n            .tickValues(tickValues))\n        .call(tickAdjust)\n        .call(g => g.select(\".domain\").remove())\n        .call(g => g.append(\"text\")\n            .attr(\"x\", marginLeft)\n            .attr(\"y\", marginTop + marginBottom - height - 6)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"class\", \"title\")\n            .text(title));\n\n    return svg.node();\n}\n\n// Was adapted and made responsive\n// from https://observablehq.com/@eesur/d3-single-stacked-bar\nexport function StackedBar(data, {\n    barHeight = 70,\n    f = d3.format('.1f'),\n    margin = {top: 20, right: 10, bottom: 20, left: 10},\n    colors = [\"#e41a1c\", \"#377eb8\", \"#4daf4a\", \"#984ea3\", \"#ff7f00\", \"#ffff33\"]\n} = {}) {\n    // Have a total of values for reference from the data:\n    const total = d3.sum(data, (d) => d.value);\n\n    // Format the data (instead of using d3.stack()) and filter out 0 values:\n    function groupDataFunc(data) {\n        // use a scale to get percentage values\n        const percent = d3\n            .scaleLinear()\n            .domain([0, total])\n            .range([0, 100]);\n        // filter out data that has zero values\n        // also get mapping for next placement\n        // (save having to format data for d3 stack)\n        let cumulative = 0;\n        const _data = data\n            .map((d) => {\n                cumulative += d.value;\n                return {\n                    value: d.value,\n                    // want the cumulative to prior value (start of rect)\n                    cumulative: cumulative - d.value,\n                    label: d.label,\n                    percent: percent(d.value),\n                };\n            })\n            .filter((d) => d.value > 0);\n        return _data;\n    }\n\n    const groupData = groupDataFunc(data);\n\n    const svg = d3\n        .create(\"svg\")\n        .attr(\"class\", \"stacked-bar-chart\")\n        .attr(\"viewBox\", \"0 0 300 150\")\n        .style(\"width\", \"500px\")\n        .style(\"max-height\", \"100%\")\n        .style(\"max-width\", \"100%\");\n\n    const sel = d3.select(svg.node());\n\n    // set up scales for horizontal placement\n    const xScale = d3.scaleLinear().domain([0, total]).range([5, 100]);\n\n    const join = sel\n        .selectAll(\"g\")\n        .data(groupData)\n        .join(\"g\")\n        .attr(\n            \"transform\",\n            `translate(${margin.left} ${margin.top})`\n        );\n\n    // stack rect for each data value\n    const rects = join\n        .append(\"rect\")\n        .attr(\"class\", \"rect-stacked\")\n        .attr(\"x\", (d) => xScale(d.cumulative) + \"%\")\n        .attr(\"y\", \"15%\")\n        .attr(\"height\", barHeight)\n        .attr(\"width\", (d) => xScale(d.value) + \"%\")\n        .style(\"fill\", (d, i) => colors[i]);\n\n    // add values on bar\n    const valueTexts = join\n        .append(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", (d) => xScale(d.cumulative) + xScale(d.value) / 2 + \"%\")\n        .attr(\"y\", \"13%\")\n        .style(\"font-weight\", \"bold\")\n        .text((d) => d.value);\n\n    // add some labels for percentages\n    const percentTexts = join\n        .append(\"text\")\n        .attr(\"class\", \"text-percent\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", (d) => xScale(d.cumulative) + xScale(d.value) / 2 + \"%\")\n        .attr(\"y\", \"70%\")\n        .style(\"font-weight\", \"bold\")\n        .text((d) => f(d.percent) + \" %\");\n\n    // add the labels\n    const labelTexts = join\n        .append(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", (d) => xScale(d.cumulative) + xScale(d.value) / 2 + \"%\")\n        .attr(\"y\", \"80%\")\n        .style(\"fill\", (d, i) => colors[i])\n        .style(\"font-weight\", \"bold\")\n        .text((d) => d.label);\n\n    valueTexts.style(\"opacity\", 0);\n    percentTexts.style(\"opacity\", 0);\n    labelTexts.style(\"opacity\", 0);\n\n    join.on(\"mouseover\", function () {\n        const bar = d3.select(this);\n        bar.select(\".text-value\").style(\"opacity\", 1);\n        bar.select(\".text-percent\").style(\"opacity\", 1);\n        bar.select(\".text-label\").style(\"opacity\", 1);\n    });\n\n    join.on(\"mouseout\", function () {\n        const bar = d3.select(this);\n        bar.select(\".text-value\").style(\"opacity\", 0);\n        bar.select(\".text-percent\").style(\"opacity\", 0);\n        bar.select(\".text-label\").style(\"opacity\", 0);\n    });\n\n\n    return svg.node();\n}\n\nexport function createLegend(labelColorMap) {\n    const svg_base = d3\n        .create(\"svg\")\n        .attr(\"class\", \"stacked-bar-chart\")\n        .attr(\"viewBox\", \"0 0 300 150\")\n        .style(\"width\", \"500px\")\n        // .style(\"height\", \"100px\")\n        .style(\"max-height\", \"100%\")\n        .style(\"max-width\", \"100%\");\n    const svg = d3.select(svg_base.node());\n\n    // Extract the keys and colors from the labelColorMap\n    let keys = Object.keys(labelColorMap);\n    let colors = Object.values(labelColorMap);\n\n    // Define the color scale\n    let color = d3.scaleOrdinal()\n        .domain(keys)\n        .range(colors);\n\n    // Add dots in the legend for each name\n    let size = 15;\n    svg.selectAll(\"color_squares\")\n        .data(keys)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", 10)\n        .attr(\"y\", function (d, i) {\n            return i * (size + 5);\n        })\n        .attr(\"width\", size)\n        .attr(\"height\", size)\n        .style(\"fill\", function (d) {\n            return color(d);\n        });\n\n    // Add labels in the legend for each name\n    svg.selectAll(\"labels\")\n        .data(keys)\n        .enter()\n        .append(\"text\")\n        .attr(\"x\", 10 + size * 1.2)\n        .attr(\"y\", function (d, i) {\n            return i * (size + 5) + (size / 2);\n        })\n        // .style(\"fill\", function (d) {\n        //     return color(d);\n        // })\n        .text(function (d) {\n            return d;\n        })\n        .attr(\"text-anchor\", \"left\")\n        .style(\"alignment-baseline\", \"middle\");\n\n    return svg.node();\n}\n\n// https://d3-graph-gallery.com/graph/barplot_stacked_basicWide.html\nexport function createStackedBarChart(data, colorsMap) {\n\n    // Set the dimensions and margins of the graph\n    let margin = {top: 10, right: 10, bottom: 10, left: 10},\n        width = 700 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n\n    // Append the SVG object to the body of the page\n    const svg_base = d3\n        .create(\"svg\")\n        .attr(\"viewBox\", \"0 0 700 500\")\n        .attr(\"width\", width + margin.left + margin.right)\n        // .attr(\"height\", height + margin.top + margin.bottom)\n        .style(\"max-height\", \"100%\")\n        .style(\"max-width\", \"100%\");\n    const svg = d3.select(svg_base.node());\n\n\n    // Extract the categories from the data\n    let categories = Object.keys(data);\n\n    // sort the categories by the total value\n    categories.sort(function (a, b) {\n        return data[b].reduce(function (sum, item) {\n            return sum + item.value;\n        }, 0) - data[a].reduce(function (sum, item) {\n            return sum + item.value;\n        }, 0);\n    });\n\n    categories = categories.slice(0, 5);\n\n    // Extract the subgroups and values for each category\n    let subgroups = ['CRITICAL', 'ENDANGERED', 'VULNERABLE', 'LEAST_CONCERN'];\n    let values = [];\n    categories.forEach(function (category) {\n        let categoryData = data[category];\n        categoryData.forEach(function (item) {\n            values.push(item.value);\n        });\n    });\n\n    // Add X axis\n    let x = d3\n        .scaleBand()\n        .domain(categories)\n        .range([0, width])\n        .padding([0.2]);\n    svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x).tickSizeOuter(0));\n\n    // Add Y axis\n    let y = d3.scaleLinear().domain([0, d3.max(values)]).range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y));\n\n    // Stack the data\n    let stackedData = d3\n        .stack()\n        .keys(subgroups)\n        .value(function (d, key) {\n            let categoryData = data[d];\n            let value = 0;\n            categoryData.forEach(function (item) {\n                if (item.category === key) {\n                    value = item.value;\n                }\n            });\n            return value;\n        })(categories);\n\n    // Show the bars\n    svg\n        .append(\"g\")\n        .selectAll(\"g\")\n        // Enter in the stack data\n        .data(stackedData)\n        .enter()\n        .append(\"g\")\n        .attr(\"fill\", function (d) {\n            return colorsMap[d.key];\n        })\n        .selectAll(\"rect\")\n        // Enter a second time to add all rectangles\n        .data(function (d) {\n            return d;\n        })\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", function (d) {\n            return x(d.data);\n        })\n        .attr(\"y\", function (d) {\n            return y(d[1]);\n        })\n        .attr(\"height\", function (d) {\n            return y(d[0]) - y(d[1]);\n        })\n        .attr(\"width\", x.bandwidth());\n\n    return svg.node();\n}\n","import React, {useEffect, useRef} from 'react';\nimport './figureDistrib.css';\n\nimport {createLegend, createStackedBarChart, StackedBar} from '../../utils'\nimport * as d3 from \"d3\";\n\n\nconst FigureDistrib = ({countryIucnCatRepartition, countrySpeciesRepartition, selectedCountry}) => {\n\n    const graphRefGeneral = useRef(null);\n    const graphRefSpecies = useRef(null);\n    const graphLegendRef = useRef(null);\n\n    const colors = ['#d51415', '#f5a031', '#f8cd26', '#a0a0a0'];\n\n    const legend = createLegend({\n        'Critical': colors[0],\n        'Endangered': colors[1],\n        'Vulnerable': colors[2],\n        'Least Concern': colors[3],\n    })\n\n    const colorsMap = {\n        'CRITICAL': colors[0],\n        'ENDANGERED': colors[1],\n        'VULNERABLE': colors[2],\n        'LEAST_CONCERN': colors[3],\n    }\n\n    useEffect(() => {\n\n        graphRefSpecies.current.innerHTML = '';\n\n        const tmp_data = countrySpeciesRepartition[selectedCountry];\n        const data = tmp_data ? JSON.parse(JSON.stringify(tmp_data)) : tmp_data;\n\n\n        if (!data) {\n            if (!selectedCountry) {\n                d3.select('.figureVulnerabilities__card_info').text('Select a country');\n            } else {\n                d3.select('.figureVulnerabilities__card_info').text('Select another country');\n            }\n            return;\n        }\n\n        for (const category in data) {\n            // Find the category object with \"TOT_KNOWN\" as the category value\n            const totKnownCategory = data[category].find(obj => obj.category === \"TOT_KNOWN\");\n\n            // Calculate the \"LEAST_CONCERN\" value\n            const leastConcernValue = totKnownCategory.value - data[category]\n                .filter(obj => obj.category !== \"TOT_KNOWN\")\n                .reduce((total, obj) => total + obj.value, 0);\n\n            // Replace the \"TOT_KNOWN\" category object with \"LEAST_CONCERN\"\n            totKnownCategory.category = \"LEAST_CONCERN\";\n            totKnownCategory.value = leastConcernValue;\n        }\n\n\n        const bar = createStackedBarChart(data, colorsMap);\n        graphRefSpecies.current.appendChild(bar);\n        // graphLegendRef.current.appendChild(legend);\n        d3.select('.figureVulnerabilities__card_info').text(selectedCountry);\n\n    }, [selectedCountry]);\n\n\n\n    useEffect(() => {\n\n        graphRefGeneral.current.innerHTML = '';\n        graphLegendRef.current.innerHTML = '';\n\n        let d = countryIucnCatRepartition[selectedCountry];\n        if (!d) {\n            if (!selectedCountry) {\n                d3.select('.figureDistrib__card_info').text('Select a country');\n            } else {\n                d3.select('.figureDistrib__card_info').text('Select another country');\n            }\n            return;\n        }\n\n        let data = [\n            {label: 'CR', value: d['CRITICAL']},\n            {label: 'EN', value: d['ENDANGERED']},\n            {label: 'VU', value: d['VULNERABLE']},\n            {label: 'LC', value: d['TOT_KNOWN'] - d['CRITICAL'] - d['ENDANGERED'] - d['VULNERABLE']}\n        ]\n        const bar = StackedBar(data, {\n            colors: colors,\n        })\n        graphRefGeneral.current.appendChild(bar);\n        graphLegendRef.current.appendChild(legend);\n        d3.select('.figureDistrib__card_info').text(selectedCountry);\n\n    }, [selectedCountry]);\n\n\n    return (\n        <div className=\"figureDistrib\" id=\"figureDistrib\">\n            <div className=\"figureDistrib__card\">\n                <h1 className='figureDistrib__card_title'>Repartition in the IUCN Categories</h1>\n                <div className=\"figureDistrib__card_info\">Select a country</div>\n                <table>\n                    <tbody>\n                    <tr>\n                        <td>\n                            <div className=\"figureDistrib__card_graph_general\" ref={graphRefGeneral}></div>\n                        </td>\n                        <td>\n                            <div className=\"figureDistrib__card_graph_species\" ref={graphRefSpecies}></div>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n                <div className=\"figureDistrib__card_legend\" ref={graphLegendRef}></div>\n            </div>\n        </div>\n    );\n};\n\nexport default FigureDistrib;","import React, {useEffect, useRef, useState} from 'react';\r\nimport * as d3 from 'd3';\r\nimport './figureTerrestrial.css';\r\n\r\nconst FigureTerrestrial = ({selectedCountry, selectedYear, terrestrialJSON}) => {\r\n\r\n    const margin = { top: 40, right: 50, bottom: 60, left: 60 },\r\n    width = 960 - margin.left - margin.right,\r\n    height = 400 - margin.top - margin.bottom,\r\n    colorWorld = \"DarkGreen\",\r\n    colorCountry = \"Green\";\r\n\r\n    // import data from terrestrialJSON\r\n    const tmpMap = new Map();\r\n    terrestrialJSON.forEach((d) => {\r\n        let countryName = d.Country;\r\n        let data = d.Data;\r\n        const pointsList = [];\r\n        data.forEach((d) => {\r\n            const pointsMap = new Map();\r\n            let year = Number(d.Year);\r\n            let value = Number(d.Value);\r\n            pointsMap.set('year', year);\r\n            pointsMap.set('value', value);\r\n            pointsList.push(pointsMap);\r\n        });\r\n        tmpMap.set(countryName, pointsList);\r\n    });\r\n       \r\n    const yMinValue = d3.min(Array.from(tmpMap.values()), (d) => d3.min(d, (d2) => d2.get('value')))\r\n    const yMaxValue = d3.max(Array.from(tmpMap.values()), (d) => d3.max(d, (d2) => d2.get('value')))\r\n\r\n    const xMinValue = d3.min(Array.from(tmpMap.values()), (d) => d3.min(d, (d2) => d2.get('year')))\r\n    const xMaxValue = d3.max(Array.from(tmpMap.values()), (d) => d3.max(d, (d2) => d2.get('year')))\r\n\r\n    const getX = d3\r\n                .scaleTime()\r\n                .domain([xMinValue, xMaxValue])\r\n                .range([0, width]);\r\n\r\n    const getY = d3\r\n                .scaleLinear()\r\n                .domain([yMinValue - 1, yMaxValue + 2])\r\n                .range([height, 0]);\r\n\r\n    const getXAxis = (ref) => {\r\n        const xAxis = d3.axisBottom(getX);\r\n        d3.select(ref)\r\n        .attr(\"class\", \"x-axis\")\r\n        .call(xAxis.tickFormat(d3.format(\"d\")));\r\n    };\r\n\r\n    const getYAxis = (ref) => {\r\n        const yAxis = d3.axisLeft(getY).tickSize(-width).tickPadding(7);\r\n        d3.select(ref)\r\n        .attr(\"class\", \"y-axis\")\r\n        .call(yAxis);\r\n    };\r\n\r\n    const linePathWorld = d3\r\n                .line()\r\n                .x((d) => getX(d.get('year')))\r\n                .y((d) => getY(d.get('value')))\r\n                .curve(d3.curveMonotoneX)(tmpMap.get(\"World\"));\r\n\r\n    useEffect(() => {\r\n        if (selectedCountry !== null) {\r\n            // Remove previous path if exists, but keep the world path\r\n            d3.select(\"#figureTerrestrial\")\r\n            .select(\".figureTerrestrial__card\")\r\n            .selectAll(\".countryLine\")\r\n            .remove();\r\n            if (tmpMap.has(selectedCountry)) {\r\n                const linePathCountry = d3\r\n                    .line()\r\n                    .x((d) => getX(d.get('year')))\r\n                    .y((d) => getY(d.get('value')))\r\n                    .curve(d3.curveMonotoneX)(tmpMap.get(selectedCountry));\r\n\r\n                // Add new path\r\n                d3.select(\"#figureTerrestrial\")\r\n                    .select(\".figureTerrestrial__card\")\r\n                    .append(\"path\")\r\n                    .attr(\"stroke-width\", 3)\r\n                    .attr(\"fill\", \"none\")\r\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n                    .attr(\"stroke\", colorCountry)\r\n                    .attr(\"d\", linePathCountry)\r\n                    .attr(\"class\", \"countryLine\");\r\n            }\r\n        }        \r\n\r\n    }, [selectedCountry]);\r\n\r\n    // Add circle for selected year\r\n    useEffect(() => {\r\n        if (selectedYear !== null) {\r\n            // Remove previous circle if exists\r\n            d3.select(\"#figureTerrestrial\")\r\n            .select(\".figureTerrestrial__card\")\r\n            .selectAll(\".circle\")\r\n            .remove();\r\n            if (tmpMap.has(selectedCountry)) {\r\n                const circle = d3.select(\"#figureTerrestrial\")\r\n                    .select(\".figureTerrestrial__card\")\r\n                    .append(\"circle\")\r\n                    .attr(\"class\", \"circle\")\r\n                    .attr(\"r\", 5)\r\n                    .attr(\"fill\", colorCountry)\r\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n                    .attr(\"cx\", getX(selectedYear))\r\n                    .attr(\"cy\", getY(tmpMap.get(selectedCountry).find((d) => d.get('year') === selectedYear).get('value')));\r\n            }\r\n            // Add circle for world\r\n            const circle = d3.select(\"#figureTerrestrial\")\r\n                .select(\".figureTerrestrial__card\")\r\n                .append(\"circle\")\r\n                .attr(\"class\", \"circle\")\r\n                .attr(\"r\", 5)\r\n                .attr(\"fill\", colorWorld)\r\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n                .attr(\"cx\", getX(selectedYear))\r\n                .attr(\"cy\", getY(tmpMap.get(\"World\").find((d) => d.get('year') === selectedYear).get('value')));\r\n        }\r\n    }, [selectedYear, selectedCountry]);\r\n\r\n    // Add legend for selected country and world\r\n    useEffect(() => {\r\n        if (selectedCountry !== null) {\r\n            // Remove previous legend if exists\r\n            d3.select(\"#figureTerrestrial\")\r\n            .select(\".figureTerrestrial__card\")\r\n            .selectAll(\"#legendCountry\")\r\n            .remove();\r\n            if (tmpMap.has(selectedCountry)) {\r\n                const legendCountry = d3.select(\"#figureTerrestrial\")\r\n                    .select(\".figureTerrestrial__card\")\r\n                    .append(\"text\")\r\n                    .attr(\"id\", \"legendCountry\")\r\n                    .attr(\"class\", \"legendTerrestrial\")\r\n                    .attr(\"x\", 0)\r\n                    .attr(\"y\", 20)\r\n                    .attr(\"fill\", colorCountry)\r\n                    .attr(\"transform\", \"translate(\" + ((width+margin.left)/2 + 30) + \", \" + (height + margin.top + margin.bottom/3) + \")\")\r\n                    .text(selectedCountry);\r\n            }\r\n        }\r\n    }, [selectedCountry]);\r\n\r\n    return (        \r\n        <div className=\"figureTerrestrial\" id=\"figureTerrestrial\">\r\n            <h3 className=\"figureTerrestrial__title\">Terrestrial</h3>\r\n            <svg\r\n                width=\"100%\" height=\"100%\"\r\n                className=\"figureTerrestrial__card\"\r\n                viewBox={`0 0 ${width + margin.left + margin.right} \r\n                                ${height + margin.top + margin.bottom}`}\r\n            >\r\n            {\r\n            // background rectangle\r\n            }\r\n                <rect\r\n                    x={0} y={0}\r\n                    width={width + margin.left + margin.right}\r\n                    height={height + margin.top + margin.bottom}\r\n                    fill=\"grey\"\r\n                    opacity={0.1}\r\n                />\r\n            {\r\n            // x- and y-axes\r\n            }\r\n                <g className=\"axis\" ref={getYAxis} \r\n                    transform={`translate(${margin.left},${margin.top})`}\r\n                />\r\n                <g\r\n                    className=\"axis xAxis\"\r\n                    ref={getXAxis}\r\n                    transform={`translate(${margin.left},${height + margin.top})`}\r\n                />\r\n            {\r\n            // line paths\r\n            }\r\n                <path strokeWidth={3} fill=\"none\" transform={`translate(${margin.left}, ${margin.top})`} stroke={colorWorld} d={linePathWorld} />\r\n            {\r\n            // y-axis label\r\n            }\r\n                <text\r\n                    transform={\"rotate(-90)\"}\r\n                    x={0 - (height + margin.top + margin.bottom) / 2 - 45} y={0 + margin.left/2 - 20} dy=\"1em\"\r\n                    color='black' className=\"axis-label\">\r\n                    {\"Percent of land area\"}\r\n                </text>\r\n            {\r\n                // world legend\r\n            }\r\n                <text\r\n                    className=\"legendTerrestrial\"\r\n                    x={0} y={20}\r\n                    transform={`translate(${(width+margin.left)/2 - 30},${height + margin.top + margin.bottom/3})`}\r\n                    fill={colorWorld}\r\n                >\r\n                    {\"World\"}\r\n                </text>\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FigureTerrestrial;","import React, {useEffect, useRef, useState} from 'react';\r\nimport * as d3 from 'd3';\r\nimport './figureMarine.css';\r\n\r\nconst FigureMarine = ({selectedCountry, selectedYear, marineJSON}) => {\r\n\r\n    const margin = { top: 40, right: 50, bottom: 60, left: 60 },\r\n    width = 960 - margin.left - margin.right,\r\n    height = 400 - margin.top - margin.bottom,\r\n    colorWorld = \"DarkBlue\",\r\n    colorCountry = \"Blue\";\r\n\r\n    // import data from marineJSON\r\n    const tmpMap = new Map();\r\n    marineJSON.forEach((d) => {\r\n        let countryName = d.Country;\r\n        let data = d.Data;\r\n        const pointsList = [];\r\n        data.forEach((d) => {\r\n            const pointsMap = new Map();\r\n            let year = Number(d.Year);\r\n            let value = Number(d.Value);\r\n            pointsMap.set('year', year);\r\n            pointsMap.set('value', value);\r\n            pointsList.push(pointsMap);\r\n        });\r\n        tmpMap.set(countryName, pointsList);\r\n    });\r\n       \r\n    const yMinValue = d3.min(Array.from(tmpMap.values()), (d) => d3.min(d, (d2) => d2.get('value')))\r\n    const yMaxValue = d3.max(Array.from(tmpMap.values()), (d) => d3.max(d, (d2) => d2.get('value')))\r\n\r\n    const xMinValue = d3.min(Array.from(tmpMap.values()), (d) => d3.min(d, (d2) => d2.get('year')))\r\n    const xMaxValue = d3.max(Array.from(tmpMap.values()), (d) => d3.max(d, (d2) => d2.get('year')))\r\n\r\n    const getX = d3\r\n                .scaleTime()\r\n                .domain([xMinValue, xMaxValue])\r\n                .range([0, width]);\r\n\r\n    const getY = d3\r\n                .scaleLinear()\r\n                .domain([yMinValue - 1, yMaxValue + 2])\r\n                .range([height, 0]);\r\n\r\n    const getXAxis = (ref) => {\r\n        const xAxis = d3.axisBottom(getX);\r\n        d3.select(ref)\r\n        .attr(\"class\", \"x-axis\")\r\n        .call(xAxis.tickFormat(d3.format(\"d\")));\r\n    };\r\n\r\n    const getYAxis = (ref) => {\r\n        const yAxis = d3.axisLeft(getY).tickSize(-width).tickPadding(7);\r\n        d3.select(ref)\r\n        .attr(\"class\", \"y-axis\")\r\n        .call(yAxis);\r\n    };\r\n\r\n    const linePathWorld = d3\r\n                .line()\r\n                .x((d) => getX(d.get('year')))\r\n                .y((d) => getY(d.get('value')))\r\n                .curve(d3.curveMonotoneX)(tmpMap.get(\"World\"));\r\n\r\n    useEffect(() => {\r\n        if (selectedCountry !== null) {\r\n            // Remove previous path if exists, but keep the world path\r\n            d3.select(\"#figureMarine\")\r\n            .select(\".figureMarine__card\")\r\n            .selectAll(\".countryLine\")\r\n            .remove();\r\n            if (tmpMap.has(selectedCountry)) {\r\n                const linePathCountry = d3\r\n                    .line()\r\n                    .x((d) => getX(d.get('year')))\r\n                    .y((d) => getY(d.get('value')))\r\n                    .curve(d3.curveMonotoneX)(tmpMap.get(selectedCountry));\r\n\r\n                // Add new path\r\n                d3.select(\"#figureMarine\")\r\n                    .select(\".figureMarine__card\")\r\n                    .append(\"path\")\r\n                    .attr(\"stroke-width\", 3)\r\n                    .attr(\"fill\", \"none\")\r\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n                    .attr(\"stroke\", colorCountry)\r\n                    .attr(\"d\", linePathCountry)\r\n                    .attr(\"class\", \"countryLine\");\r\n            }\r\n        }        \r\n\r\n    }, [selectedCountry]);\r\n\r\n    // Add circle for selected year\r\n    useEffect(() => {\r\n        if (selectedYear !== null) {\r\n            // Remove previous circle if exists\r\n            d3.select(\"#figureMarine\")\r\n            .select(\".figureMarine__card\")\r\n            .selectAll(\".circle\")\r\n            .remove();\r\n            if (tmpMap.has(selectedCountry)) {\r\n                const circle = d3.select(\"#figureMarine\")\r\n                    .select(\".figureMarine__card\")\r\n                    .append(\"circle\")\r\n                    .attr(\"class\", \"circle\")\r\n                    .attr(\"r\", 5)\r\n                    .attr(\"fill\", colorCountry)\r\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n                    .attr(\"cx\", getX(selectedYear))\r\n                    .attr(\"cy\", getY(tmpMap.get(selectedCountry).find((d) => d.get('year') === selectedYear).get('value')));\r\n            }\r\n            // Add circle for world\r\n            const circle = d3.select(\"#figureMarine\")\r\n                .select(\".figureMarine__card\")\r\n                .append(\"circle\")\r\n                .attr(\"class\", \"circle\")\r\n                .attr(\"r\", 5)\r\n                .attr(\"fill\", colorWorld)\r\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n                .attr(\"cx\", getX(selectedYear))\r\n                .attr(\"cy\", getY(tmpMap.get(\"World\").find((d) => d.get('year') === selectedYear).get('value')));\r\n        }\r\n    }, [selectedYear, selectedCountry]);\r\n\r\n    // Add legend for selected country and world\r\n    useEffect(() => {\r\n        if (selectedCountry !== null) {\r\n            // Remove previous legend if exists\r\n            d3.select(\"#figureMarine\")\r\n            .select(\".figureMarine__card\")\r\n            .selectAll(\"#legendCountry\")\r\n            .remove();\r\n            if (tmpMap.has(selectedCountry)) {\r\n                const legendCountry = d3.select(\"#figureMarine\")\r\n                    .select(\".figureMarine__card\")\r\n                    .append(\"text\")\r\n                    .attr(\"class\", \"legendMarine\")\r\n                    .attr(\"id\", \"legendCountry\")\r\n                    .attr(\"x\", 0)\r\n                    .attr(\"y\", 20)\r\n                    .attr(\"fill\", colorCountry)\r\n                    .attr(\"transform\", \"translate(\" + ((width+margin.left)/2 + 30) + \", \" + (height + margin.top + margin.bottom/3) + \")\")\r\n                    .text(selectedCountry);\r\n            }\r\n        }\r\n    }, [selectedCountry]);\r\n\r\n    return (        \r\n        <div className=\"figureMarine\" id=\"figureMarine\">\r\n            <h3 className=\"figureMarine__title\">Marine</h3>\r\n            <svg\r\n                width=\"100%\" height=\"100%\"\r\n                className=\"figureMarine__card\"\r\n                viewBox={`0 0 ${width + margin.left + margin.right} \r\n                                ${height + margin.top + margin.bottom}`}\r\n            >\r\n            {\r\n            // background rectangle\r\n            }\r\n                <rect\r\n                    x={0} y={0}\r\n                    width={width + margin.left + margin.right}\r\n                    height={height + margin.top + margin.bottom}\r\n                    fill=\"grey\"\r\n                    opacity={0.1}\r\n                />\r\n            {\r\n            // x- and y-axes\r\n            }\r\n                <g className=\"axis\" ref={getYAxis} \r\n                    transform={`translate(${margin.left},${margin.top})`}\r\n                />\r\n                <g\r\n                    className=\"axis xAxis\"\r\n                    ref={getXAxis}\r\n                    transform={`translate(${margin.left},${height + margin.top})`}\r\n                />\r\n            {\r\n            // line paths\r\n            }\r\n                <path strokeWidth={3} fill=\"none\" transform={`translate(${margin.left}, ${margin.top})`} stroke={colorWorld} d={linePathWorld} />\r\n            {\r\n            // y-axis label\r\n            }\r\n                <text\r\n                    transform={\"rotate(-90)\"}\r\n                    x={0 - (height + margin.top + margin.bottom) / 2 - 55} y={0 + margin.left/2 - 20} dy=\"1em\"\r\n                    color='black' className='axis-label'>\r\n                    {\"Percent of marine area\"}\r\n                </text>\r\n            {\r\n                // world legend\r\n            }\r\n                <text\r\n                    className=\"legendMarine\"\r\n                    x={0} y={20}\r\n                    transform={`translate(${(width+margin.left)/2 - 30},${height + margin.top + margin.bottom/3})`}\r\n                    fill={colorWorld}\r\n                >\r\n                    {\"World\"}\r\n                </text>\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FigureMarine;","import React from 'react';\nimport './figureTree.css';\n\nconst FigureTree = () => {\n    return (\n        <div className=\"figureTree\" id=\"figureTree\">\n\n            <div className=\"figureTree__card\">\n                <h1 className='figureMap__card_title'>Phylogenetic tree</h1>\n\n                <iframe src=\"https://gavinkaa.github.io/dataviz_iframe/\" width=\"100%\" height=\"1000px\" frameBorder=\"0\">\n\n                </iframe>\n            </div>\n        </div>\n    );\n};\n\nexport default FigureTree;\n","import React from 'react';\nimport './header.css';\n\nconst Header = () => {\n    return (\n        <div id='header'>\n            <h1>Charting the Endangered</h1>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport logo from '../../assets/logo.svg';\nimport './navbar.css';\n\nconst Navbar = () => {\n    return (\n        <div className=\"navbar\">\n            <div className=\"navbar__logo\">\n                <img src={logo} alt=\"logo\"/>\n            </div>\n            <div className=\"navbar__navbar-links\">\n                <p><a href=\"#map_related_figures\"> Map </a></p>\n                <p><a href=\"#protected_areas_figures\"> Protected areas </a></p>\n                <p><a href=\"#species_tree_figures\"> Species tree </a></p>\n            </div>\n        </div>\n    );\n};\n\nexport default Navbar;","import './App.css';\nimport {\n    FigureDistrib,\n    FigureMap,\n    FigureMarine,\n    FigureTerrestrial,\n    FigureTree,\n    FigureTreeCountry,\n    FigureTreeWorld,\n    Header,\n    Navbar\n} from \"./components\";\nimport React, {useState} from \"react\";\nimport iucn_red_list from \"./data/iucn_red_list.csv\";\nimport countryIucnCatRepartition from \"./data/country_iucn_cat_repartition.json\";\nimport countrySpeciesRepartition from \"./data/country_species_repartition.json\";\nimport terrestial from \"./data/country_terrestrial_protected_area.json\";\nimport marine from \"./data/country_marine_protected_area.json\";\n\nfunction App() {\n\n    const [selectedYear, setSelectedYear] = useState(2020);\n    const [selectedCountry, setSelectedCountry] = useState(null);\n\n    const [iucnRedListCSV] = useState(iucn_red_list);\n\n    return (\n        <div className=\"App\">\n            <div className=\"gradient__bg\">\n                <Navbar/>\n                <Header/>\n            </div>\n            <div id=\"content\">\n                <div className='figures' id=\"map_related_figures\">\n                    <div>\n                        <FigureMap selectedCountry={selectedCountry} setSelectedCountry={setSelectedCountry}\n                                   selectedYear={selectedYear} iucnRedListCSV={iucnRedListCSV}/>\n                    </div>\n                    <div>\n                        <FigureDistrib countryIucnCatRepartition={countryIucnCatRepartition}\n                                       countrySpeciesRepartition={countrySpeciesRepartition}\n                                       selectedCountry={selectedCountry}/>\n\n                    </div>\n                </div>\n                <div className='figures' id=\"protected_areas_figures\">\n                    <h1 id=\"protected_areas_figures__title\">Protected areas by year</h1>\n                    <table className='graphTable'>\n                        <tbody>\n                        <tr className='graphTR'>\n                            <td className='graphTD'>\n                                <FigureTerrestrial selectedCountry={selectedCountry} selectedYear={selectedYear} terrestrialJSON={terrestial}/>\n                            </td>\n                        </tr>\n                        <tr className='graphTR'>\n                            <td className='graphTD'>\n                                <FigureMarine selectedCountry={selectedCountry} selectedYear={selectedYear} marineJSON={marine} />\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className='figures' id=\"species_tree_figures\">\n                    <FigureTree/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>\n);\n","module.exports = __webpack_public_path__ + \"static/media/worldMap.9e2bba46.geojson\";","module.exports = __webpack_public_path__ + \"static/media/logo.7b390023.svg\";","module.exports = __webpack_public_path__ + \"static/media/iucn_red_list.f5158aa8.csv\";"],"sourceRoot":""}